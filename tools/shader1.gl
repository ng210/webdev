2D visibility
Attempt to create a visibility model in 2D.
[ '2d', 'raycast', 'visibility' ]
#define cross2d(a, b) a.x*b.y - a.y*b.x
#define fromPixel(p) (p - .5*iResolution.xy)/iResolution.y
#define PI 3.1415926535897932384626433832795
#define nsin(th, lo, hi) (hi-lo)*sin(th)+lo

float aspect = 1.;

vec2 hash21(float p)
{
	vec3 p3 = fract(vec3(p) * vec3(.1031, .1030, .0973));
	p3 += dot(p3, p3.yzx + 33.33);
    return fract((p3.xx+p3.yz)*p3.zy);
}
vec2 hash22(vec2 p)
{
	vec2 o = fract(p * vec2(.1031, .1030));
    return fract((o.xx+o.yx)*o.xy);
}

int intersect(vec4 ray, vec4 sg, out vec2 p) {
    int hit = 0;
    //vec2 f = 0.1*sin(3.*PI*(sg.xy) + 0.8*iTime);
    //vec2 f = 20.*hash22(fract(sg.xy))*nsin(iTime, 0., 0.5);
    //sg.xy += pow(f, vec2(2.));
    p = ray.xy;
	float d = cross2d(ray.zw, sg.zw);
	if (d != 0.0) {
		vec2 dvu = ray.xy - sg.xy;
		float s = cross2d(ray.zw, dvu);
		float t = cross2d(sg.zw, dvu);
		if (d < 0.) {
			s = -s; t = -t; d = -d;
		}
		if (s >= 0. && s < d && t >= 0. && t < d) {
            p.xy = ray.xy + t*ray.zw/d;
            hit = 1;
		}
	}

    return hit;
}

int intersectText(vec4 ray, out float d) {
    int hit = 0;
    vec4 sg;
    vec2 iv;
    vec2 p = ray.xy+ray.zw;

    // 2
    sg = vec4(-0.1661, 0.2619, 0.0351, 0.0108); hit = max(hit, intersect(ray, sg, iv)); d = min(d, length(p-iv));
    sg = vec4(-0.131, 0.2727, 0.0351, -0.0216); hit = max(hit, intersect(ray, sg, iv)); d = min(d, length(p-iv));
    sg = vec4(-0.0959, 0.2511, 0, -0.0217); hit = max(hit, intersect(ray, sg, iv)); d = min(d, length(p-iv));
    sg = vec4(-0.0959, 0.2294, -0.0234, -0.0433); hit = max(hit, intersect(ray, sg, iv)); d = min(d, length(p-iv));
    sg = vec4(-0.1193, 0.1861, -0.0702, -0.0649); hit = max(hit, intersect(ray, sg, iv)); d = min(d, length(p-iv));
    sg = vec4(-0.1895, 0.1212, 0.0936, 0); hit = max(hit, intersect(ray, sg, iv)); d = min(d, length(p-iv));
    // D
    sg = vec4(-0.0538, 0.1212, 0, 0.1515); hit = max(hit, intersect(ray, sg, iv)); d = min(d, length(p-iv));
    sg = vec4(-0.0538, 0.2727, 0.0819, 0); hit = max(hit, intersect(ray, sg, iv)); d = min(d, length(p-iv));
    sg = vec4(0.0281, 0.2727, 0.0351, -0.0433); hit = max(hit, intersect(ray, sg, iv)); d = min(d, length(p-iv));
    sg = vec4(0.0632, 0.2294, 0, -0.0649); hit = max(hit, intersect(ray, sg, iv)); d = min(d, length(p-iv));
    sg = vec4(0.0632, 0.1645, -0.0351, -0.0433); hit = max(hit, intersect(ray, sg, iv)); d = min(d, length(p-iv));
    sg = vec4(0.0281, 0.1212, -0.0585, 0); hit = max(hit, intersect(ray, sg, iv)); d = min(d, length(p-iv));
    // V
    sg = vec4(-0.6269, -0.0779, 0.0702, -0.1515); hit = max(hit, intersect(ray, sg, iv)); d = min(d, length(p-iv));
    sg = vec4(-0.5567, -0.2294, 0.0702, 0.1515); hit = max(hit, intersect(ray, sg, iv)); d = min(d, length(p-iv));
    // I
    sg = vec4(-0.4444, -0.2294, 0, 0.1515); hit = max(hit, intersect(ray, sg, iv)); d = min(d, length(p-iv));
    // S
    sg = vec4(-0.2737, -0.0996, -0.0234, 0.0217); hit = max(hit, intersect(ray, sg, iv)); d = min(d, length(p-iv));
    sg = vec4(-0.2971, -0.0779, -0.0585, 0); hit = max(hit, intersect(ray, sg, iv)); d = min(d, length(p-iv));
    sg = vec4(-0.3556, -0.0779, -0.0233, -0.0217); hit = max(hit, intersect(ray, sg, iv)); d = min(d, length(p-iv));
    sg = vec4(-0.3789, -0.0996, 0, -0.0216); hit = max(hit, intersect(ray, sg, iv)); d = min(d, length(p-iv));
    sg = vec4(-0.3789, -0.1212, 0.1052, -0.0541); hit = max(hit, intersect(ray, sg, iv)); d = min(d, length(p-iv));
    sg = vec4(-0.2737, -0.1753, 0, -0.0325); hit = max(hit, intersect(ray, sg, iv)); d = min(d, length(p-iv));
    sg = vec4(-0.2737, -0.2078, -0.0702, -0.0216); hit = max(hit, intersect(ray, sg, iv)); d = min(d, length(p-iv));
    sg = vec4(-0.3439, -0.2294, -0.0467, 0.0433); hit = max(hit, intersect(ray, sg, iv)); d = min(d, length(p-iv));
    // I
    sg = vec4(-0.2316, -0.2294, 0, 0.1515); hit = max(hit, intersect(ray, sg, iv)); d = min(d, length(p-iv));
    // B
    sg = vec4(-0.1778, -0.2294, 0, 0.1515); hit = max(hit, intersect(ray, sg, iv)); d = min(d, length(p-iv));
    sg = vec4(-0.1778, -0.0779, 0.0702, 0); hit = max(hit, intersect(ray, sg, iv)); d = min(d, length(p-iv));
    sg = vec4(-0.1076, -0.0779, 0.0234, -0.0217); hit = max(hit, intersect(ray, sg, iv)); d = min(d, length(p-iv));
    sg = vec4(-0.0842, -0.0996, 0, -0.0324); hit = max(hit, intersect(ray, sg, iv)); d = min(d, length(p-iv));
    sg = vec4(-0.0842, -0.132, -0.0117, -0.0109); hit = max(hit, intersect(ray, sg, iv)); d = min(d, length(p-iv));
    sg = vec4(-0.0959, -0.1429, -0.0468, 0); hit = max(hit, intersect(ray, sg, iv)); d = min(d, length(p-iv));
    sg = vec4(-0.0959, -0.1429, 0.0234, -0.0324); hit = max(hit, intersect(ray, sg, iv)); d = min(d, length(p-iv));
    sg = vec4(-0.0725, -0.1753, 0, -0.0325); hit = max(hit, intersect(ray, sg, iv)); d = min(d, length(p-iv));
    sg = vec4(-0.0725, -0.2078, -0.0234, -0.0216); hit = max(hit, intersect(ray, sg, iv)); d = min(d, length(p-iv));
    sg = vec4(-0.0959, -0.2294, -0.0468, 0); hit = max(hit, intersect(ray, sg, iv)); d = min(d, length(p-iv));
    // I
    sg = vec4(-0.0304, -0.2294, 0, 0.1515); hit = max(hit, intersect(ray, sg, iv)); d = min(d, length(p-iv));
    // L
    sg = vec4(0.0234, -0.0779, 0, -0.1515); hit = max(hit, intersect(ray, sg, iv)); d = min(d, length(p-iv));
    sg = vec4(0.0234, -0.2294, 0.0819, 0); hit = max(hit, intersect(ray, sg, iv)); d = min(d, length(p-iv));
    // I
    sg = vec4(0.1474, -0.2294, 0, 0.1515); hit = max(hit, intersect(ray, sg, iv)); d = min(d, length(p-iv));
    // T
    sg = vec4(0.2012, -0.0779, 0.1286, 0); hit = max(hit, intersect(ray, sg, iv)); d = min(d, length(p-iv));
    sg = vec4(0.2596, -0.0779, 0, -0.1515); hit = max(hit, intersect(ray, sg, iv)); d = min(d, length(p-iv));
    // Y
    sg = vec4(0.3719, -0.0779, 0.0702, -0.0866); hit = max(hit, intersect(ray, sg, iv)); d = min(d, length(p-iv));
    sg = vec4(0.4421, -0.1645, 0.0585, 0.0866); hit = max(hit, intersect(ray, sg, iv)); d = min(d, length(p-iv));
    sg = vec4(0.4421, -0.1645, 0, -0.0649); hit = max(hit, intersect(ray, sg, iv)); d = min(d, length(p-iv));

    return hit;
}

int intersectPicture(vec4 ray, out float d) {
    int hit = 0;
    vec4 sg;
    vec2 iv;
    vec2 p = ray.xy+ray.zw;

    sg = vec4(-0.8262, 0.3806, -0.0161, 0); hit = max(hit, intersect(ray, sg, iv)); d = min(d, length(p-iv));
    sg = vec4(-0.8423, 0.3806, -0.016, 0.0034); hit = max(hit, intersect(ray, sg, iv)); d = min(d, length(p-iv));
    sg = vec4(-0.8583, 0.384, -0.0128, 0.0137); hit = max(hit, intersect(ray, sg, iv)); d = min(d, length(p-iv));
    sg = vec4(-0.8711, 0.3977, 0, 0.0137); hit = max(hit, intersect(ray, sg, iv)); d = min(d, length(p-iv));
    sg = vec4(-0.8711, 0.4114, 0.0064, 0.0171); hit = max(hit, intersect(ray, sg, iv)); d = min(d, length(p-iv));
    sg = vec4(-0.8647, 0.4285, 0.0064, 0.0102); hit = max(hit, intersect(ray, sg, iv)); d = min(d, length(p-iv));
    sg = vec4(-0.8583, 0.4387, 0.0192, 0.0205); hit = max(hit, intersect(ray, sg, iv)); d = min(d, length(p-iv));
    sg = vec4(-0.8391, 0.4592, 0.0129, 0.0069); hit = max(hit, intersect(ray, sg, iv)); d = min(d, length(p-iv));
    sg = vec4(-0.8262, 0.4661, 0.0064, 0.0171); hit = max(hit, intersect(ray, sg, iv)); d = min(d, length(p-iv));
    sg = vec4(-0.8198, 0.4832, 0.0064, 0.0068); hit = max(hit, intersect(ray, sg, iv)); d = min(d, length(p-iv));
    sg = vec4(-0.8134, 0.49, 0.016, 0); hit = max(hit, intersect(ray, sg, iv)); d = min(d, length(p-iv));
    sg = vec4(-0.7974, 0.49, 0.0096, -0.0103); hit = max(hit, intersect(ray, sg, iv)); d = min(d, length(p-iv));
    sg = vec4(-0.8198, 0.4558, 0.0032, -0.0137); hit = max(hit, intersect(ray, sg, iv)); d = min(d, length(p-iv));
    sg = vec4(-0.8166, 0.4421, 0.0096, -0.0102); hit = max(hit, intersect(ray, sg, iv)); d = min(d, length(p-iv));
    sg = vec4(-0.807, 0.4319, 0.0096, 0); hit = max(hit, intersect(ray, sg, iv)); d = min(d, length(p-iv));
    sg = vec4(-0.7974, 0.4319, 0.0064, -0.0034); hit = max(hit, intersect(ray, sg, iv)); d = min(d, length(p-iv));
    sg = vec4(-0.791, 0.4285, 0.0096, -0.0035); hit = max(hit, intersect(ray, sg, iv)); d = min(d, length(p-iv));
    sg = vec4(-0.7461, 0.4524, -0.0192, -0.041); hit = max(hit, intersect(ray, sg, iv)); d = min(d, length(p-iv));
    sg = vec4(-0.7653, 0.4114, -0.0353, 0); hit = max(hit, intersect(ray, sg, iv)); d = min(d, length(p-iv));
    sg = vec4(-0.8359, 0.4079, 0.0129, -0.0034); hit = max(hit, intersect(ray, sg, iv)); d = min(d, length(p-iv));
    sg = vec4(-0.823, 0.4045, 0.0096, -0.0034); hit = max(hit, intersect(ray, sg, iv)); d = min(d, length(p-iv));
    sg = vec4(-0.8134, 0.4011, 0.0128, -0.0068); hit = max(hit, intersect(ray, sg, iv)); d = min(d, length(p-iv));
    sg = vec4(-0.8006, 0.3943, 0.0064, -0.0103); hit = max(hit, intersect(ray, sg, iv)); d = min(d, length(p-iv));
    sg = vec4(-0.7942, 0.384, -0.0096, -0.0137); hit = max(hit, intersect(ray, sg, iv)); d = min(d, length(p-iv));
    sg = vec4(-0.8038, 0.3703, -0.0128, -0.0102); hit = max(hit, intersect(ray, sg, iv)); d = min(d, length(p-iv));

    return hit;
}

int intersectPoly(vec4 ray, int count, out float d) {
    int hit = 0;
    vec4 sg;
    vec2 iv;
    vec2 p = ray.xy+ray.zw;
    float r = .1;
    vec2 pos = vec2(.40*aspect-r, .40-r);
    float th = nsin(.1*iTime, .5, 2.5) * iTime;
    vec2 p1 = pos + r*vec2(cos(th), sin(th));
    for (int i=0; i<count; i++) {
        th += 2.*PI/float(count);
        vec2 p2 = pos + r*vec2(cos(th), sin(th));
        vec4 sg = vec4(p1, .8*(p2-p1));
        hit = max(hit, intersect(ray, sg, iv));
        d = min(d, length(p-iv));
        p1 = p2;
    }
    return hit;
}

float getDist(vec2 p) {
    vec2 ra = fromPixel(iMouse.xy);
    vec2 rb = fromPixel(p);
    vec4 ray = vec4(ra, rb-ra);
    
    float d1 = 1000., d2 = 1000.;
    int hit = intersectText(ray, d1);
    hit = max(hit, intersectPicture(ray, d2));
    float d = min(d1, d2);
    hit = max(hit, intersectPoly(ray, 8, d1));
    d = min(d, d1);

    float li = pow(nsin(1.3*iTime, .9, 1.0)-clamp(.6*length(ray.zw), 0., 1.), 1.6);
    return d < 0.004 ? 1. : hit > 0 ? 0.6*li : li;
}

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    aspect = iResolution.x/iResolution.y;
    float d = clamp(getDist(fragCoord), 0., 1.);
    vec3 col = d*vec3(fragCoord.xy/iResolution.xy, .2);
    fragColor = vec4(col, 1.0);
}
